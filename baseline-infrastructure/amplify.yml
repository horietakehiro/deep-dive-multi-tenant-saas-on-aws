applications:
  - appRoot: apps/control-plane
    env:
      variables:
        W: apps/control-plane
    frontend:
      buildPath: '/'
      phases:
        preBuild:
          commands:
            - npm install -w ${W}
        build:
          commands:
            - npm run build -w ${W}
      artifacts:
        baseDirectory: apps/control-plane/build/client
        files:
          - "**/*"
      cache:
        paths:
          - .npm/**/*
          - node_modules/**/*
    backend:
      buildPath: "/"
      phases:
        build:
          commands:
            - npm ci --cache .npm --prefer-offlinei -w ${W}
            - npm install --save-dev @aws-amplify/backend @aws-amplify/backend-cli --cache .npm --prefer-offlinei
            - npm run -w ${W} ampx -- pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
  - appRoot: apps/application-plane
    env:
      variables:
        W: apps/application-plane
        # CONTROL_PLANE_APP_ID: "アプリケーション作成時に設定される"
    frontend:
      buildPath: "/"
      phases:
        preBuild:
          commands:
            - npm install -w ${W}
        build:
          commands:
            - npm run build -w ${W}
      artifacts:
        baseDirectory: apps/application-plane/build/client
        files:
          - "**/*"
      cache:
        paths:
          - .npm/**/*
          - node_modules/**/*
    backend:
      phases:
        build:
          commands:

            # # リソースを共有したい、作成済みのコントロールプレーン側のリソース設定をエクスポートする
            # コントロールプレーンのバックエンドスタックが更新中の場合はoutputsファイルを生成できないため、更新が完了するまで待機する
            - npm install --save-dev @aws-amplify/backend @aws-amplify/backend-cli --cache .npm --prefer-offlinei
            - sudo dnf install -y jq
            - STACK_ARN=$(aws amplify get-branch --app-id  ${CONTROL_PLANE_APP_ID}  --branch-name main | jq -r .branch.backend.stackArn)
            - STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_ARN | jq -r .Stacks[0].StackStatus)
            - echo stack status of ${STACK_ARN} is ${STACK_STATUS}
            - | 
              while [[ $STACK_STATUS != *"COMPLETE" ]]
              do
                echo wait for 15 sec...
                sleep 15
                STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_ARN | jq -r .Stacks[0].StackStatus)
                echo stack status of ${STACK_ARN} is ${STACK_STATUS}
              done
            - npm run -w apps/control-plane ampx -- generate outputs --branch $AWS_BRANCH --app-id $CONTROL_PLANE_APP_ID
            # 自分自身のリソースをデプロイする
            - npm ci --cache .npm --prefer-offlinei -w ${W}
            - npm run -w ${W} ampx -- pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
